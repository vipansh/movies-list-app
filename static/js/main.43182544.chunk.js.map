{"version":3,"sources":["components/Title.js","components/Movie.js","App.js","serviceWorker.js","index.js"],"names":["setColor","vote_average","Title","title","poster_path","overview","className","src","aly","Movie","props","state","items","isLoded","value","handleChange","bind","handleSubmit","event","this","setState","target","length","Url","fetch","then","resorce","json","console","log","preventDefault","onSubmit","onClick","e","componentDidMount","type","placeholder","onChange","results","map","id","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6OAKMA,G,MAAW,SAACC,GACd,OAAIA,GAAgB,EACT,QAEFA,GAAgB,EACd,SAGA,QAoBAC,EAhBD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,SAAUJ,EAAjC,EAAiCA,aAAjC,OAAoD,6BAE9D,yBAAKK,UAAU,SACX,yBAAKC,IAhBE,kCAgBcH,EAAcI,IAAKL,IACxC,yBAAKG,UAAU,cACX,4BAAKH,GAEL,0BAAMG,UAAS,cAASN,EAASC,KAAjC,IAAqDA,IAEzD,yBAAKK,UAAU,kBACVD,MC0EEI,E,kDAxFX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MAAO,GACPC,SAAS,EACTC,MAAO,IAGX,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATL,E,yDAaNE,GACTC,KAAKC,SAAS,CAAEN,MAAOI,EAAMG,OAAOP,U,mCAG3BI,GAAQ,IAAD,OAChB,GAA+B,GAA3BC,KAAKR,MAAMG,MAAMQ,OAGjB,KAAIC,EAAM,4FACMC,MAAMD,EAAMJ,KAAKR,MAAMG,OAClCW,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAACE,GACHC,QAAQC,IAAIN,GAGZ,EAAKH,SAAS,CACVR,MAAOe,EACPd,SAAS,EACTC,MAAO,QAKvBI,EAAMY,mB,0CAIW,IAAD,OAEZP,EAAG,+GACSC,MAAMD,GACjBE,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAACE,GACHC,QAAQC,IAAIN,GAGZ,EAAKH,SAAS,CACVR,MAAOe,EACPd,SAAS,S,+BAMf,IAAD,SAGoBM,KAAKR,MAAxBC,EAHD,EAGCA,MAEN,OALK,EAGQC,QAGD,6BAGJ,0BAAMP,UAAU,SAASyB,SAAUZ,KAAKF,cACpC,4BAAQX,UAAU,YAAY0B,QAAS,SAACC,GAAD,OAAO,EAAKC,sBAAnD,QACA,0BAAM5B,UAAU,cACZ,+BAEI,2BAAO6B,KAAK,OAAO7B,UAAU,SAAS8B,YAAY,SAAStB,MAAOK,KAAKR,MAAMG,MAAOuB,SAAUlB,KAAKJ,gBAEvG,2BAAOT,UAAU,SAAS6B,KAAK,SAASrB,MAAM,aAKtD,wBAAIR,UAAU,SAAd,qBACA,yBAAKA,UAAU,mBAAf,KAAoCM,EAAM0B,QAAQC,KAAK,SAAA3B,GAAK,OAAI,kBAAC,EAAD,eAAO4B,GAAI5B,EAAM4B,IAAQ5B,QAhBrF,2BAqBC,+C,GArFD6B,IAAMC,WCEXC,MAZf,WACE,OACE,yBAAKrC,UAAU,OACb,4BAAQA,UAAU,eAIlB,kBAAC,EAAD,QCGcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a","file":"static/js/main.43182544.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport \"./Style.css\"\r\n\r\nlet imageUrl = \"https://image.tmdb.org/t/p/w342\"\r\nconst setColor = (vote_average) => {\r\n    if (vote_average >= 8) {\r\n        return 'green'\r\n    }\r\n    else if (vote_average >= 6) {\r\n        return 'orange'\r\n    }\r\n    else {\r\n        return 'red'\r\n    }\r\n}\r\n\r\nconst Title = ({ title, poster_path, overview, vote_average }) => <div>\r\n\r\n    <div className=\"movie\">\r\n        <img src={imageUrl + poster_path}  aly={title}></img>\r\n        <div className=\"movie-info\">\r\n            <h4>{title}</h4>\r\n\r\n            <span className={`tag ${setColor(vote_average)}`} > {vote_average}</span>\r\n        </div>\r\n        <div className=\"movie-overview\">\r\n            {overview}\r\n        </div>\r\n    </div>\r\n\r\n</div >;\r\n\r\nexport default Title;\r\n","import React, { Component } from \"react\";\r\nimport Title from \"./Title\"\r\n\r\nconst data_api = {\r\n    baseUrl: \"https://api.themoviedb.org/3\",\r\n    apiKey: \"57359ff087905e870d40ba4880a1dce0\",\r\n    imageUrl: \"https://image.tmdb.org/t/p/w342\",\r\n    search_url: 'https://api.themoviedb.org/3/search/movie?api_key=57359ff087905e870d40ba4880a1dce0&query='\r\n};\r\n\r\n\r\n\r\nclass Movie extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            items: [],\r\n            isLoded: false,\r\n            value: ''\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n\r\n    };\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        if (this.state.value.length != 0) {\r\n\r\n\r\n            let Url = 'https://api.themoviedb.org/3/search/movie?api_key=57359ff087905e870d40ba4880a1dce0&query='\r\n            const resorce = fetch(Url + this.state.value)\r\n                .then(resorce => resorce.json())\r\n                .then((json) => {\r\n                    console.log(Url);\r\n\r\n\r\n                    this.setState({\r\n                        items: json,\r\n                        isLoded: true,\r\n                        value: ''\r\n                    });\r\n\r\n                });\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        let Url = `https://api.themoviedb.org/3/discover/movie?api_key=1b62ccff88d2cd537027e1d82920197b&sort_by=popularity.desc`;\r\n        const resorce = fetch(Url)\r\n            .then(resorce => resorce.json())\r\n            .then((json) => {\r\n                console.log(Url);\r\n\r\n\r\n                this.setState({\r\n                    items: json,\r\n                    isLoded: true,\r\n\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        var { items, isLoded } = this.state\r\n\r\n        if (isLoded) {\r\n            return (<div>\r\n\r\n\r\n                <form className=\"header\" onSubmit={this.handleSubmit}>\r\n                    <button className=\"home-link\" onClick={(e) => this.componentDidMount()}>Home</button>\r\n                    <span className=\"search-bar\">\r\n                        <label>\r\n\r\n                            <input type=\"text\" className=\"search\" placeholder=\"Search\" value={this.state.value} onChange={this.handleChange} />\r\n                        </label>\r\n                        <input className=\"button\" type=\"submit\" value=\"Search\" />\r\n                    </span>\r\n\r\n                </form>\r\n\r\n                <h1 className=\"title\">Latest Movie List</h1>\r\n                <div className=\"movie-container\">  {items.results.map((items => <Title id={items.id} {...items} />))}\r\n                </div>\r\n                Code by: Vipansh Thakur\r\n            </div>)\r\n        }\r\n        else return (<div>Loading...</div>)\r\n\r\n    }\r\n}\r\nexport default Movie\r\n","import React from 'react';\r\nimport Movie from \"./components/Movie\"\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n\r\n\r\n      </header>\r\n      <Movie />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}